#!/usr/bin/env python
#
# Copyright (c) 2012, Dave Eddy <dave@daveeddy.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the project nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

__program__    = 'Viridian'
__author__     = 'David Eddy'
__credits__    = ['Michael Zeller', 'Skye Sawyer']
__license__    = 'BSD 3-Clause'
__version__    = '1.3'
__maintainer__ = 'David Eddy'
__email__      = 'dave@daveeddy.com'
__status__     = 'Development'

import AmpacheTools

import gettext
import gobject
import dbus, dbus.service, dbus.glib
import os

VIRIDIAN_DIR = os.path.join(os.environ['HOME'], '.viridian')
LOCALES_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)) , 'locales')

class AmpacheService(dbus.service.Object):
    """Used for single instance"""
    def __init__(self, app):
        self.app = app
        bus_name = dbus.service.BusName('com.daveeddy.Viridian', bus = dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name, '/com/daveeddy/Viridian')

    @dbus.service.method(dbus_interface='com.daveeddy.Viridian')
    def show_window(self):
        """Used to bring the current window to the front"""
        self.app.window.present()

if __name__ == '__main__':
    # initialize gettext
    gettext.install('viridian', LOCALES_DIR)

    try: # try to see if an instance is already running, and if so don't make a second instance
        if dbus.SessionBus().request_name('com.daveeddy.Viridian') != dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
            print _('Application already running.. exiting.')
            method = dbus.SessionBus().get_object('com.daveeddy.Viridian', '/com/daveeddy/Viridian').get_dbus_method('show_window')
            method()
        else:
            raise Exception(_('Not Running'))
    except: # some distros don't support this, so just open a second instance i guess....
        is_first_time = False
        if not os.path.exists(VIRIDIAN_DIR):
            is_first_time = True
            os.mkdir(VIRIDIAN_DIR)
            os.chmod(VIRIDIAN_DIR, 0700)

        db_session   = AmpacheTools.DatabaseSession.DatabaseSession(os.path.join(VIRIDIAN_DIR, 'viridian.sqlite'))
        ampache_conn = AmpacheTools.AmpacheSession.AmpacheSession()
        audio_engine = AmpacheTools.AudioEngine.AudioEngine(ampache_conn)

        # create the gui and give it access to all of the components it needs
        gui = AmpacheTools.AmpacheGui.AmpacheGUI(ampache_conn, audio_engine, db_session, is_first_time, __version__)

        # this is for dbus and single instance
        service = AmpacheService(gui)

        # allow the audioengine to callback to the GUI (for messages like End Of Song)
        audio_engine.set_ampache_gui_hook(gui)

        # display the gui
        gui.main()
